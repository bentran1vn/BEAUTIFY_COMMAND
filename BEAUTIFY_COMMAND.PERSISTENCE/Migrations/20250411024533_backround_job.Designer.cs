// <auto-generated />
using System;
using BEAUTIFY_COMMAND.PERSISTENCE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BEAUTIFY_COMMAND.PERSISTENCE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250411024533_backround_job")]
    partial class backround_job
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật can thiệp ngoại khoa vùng mặt",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Vùng Mặt"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật can thiệp ngoại khoa vùng ngực",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Vùng Ngực"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật can thiệp ngoại khoa vùng bụng",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Vùng Bụng"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật can thiệp ngoại khoa vùng mông",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Vùng Mông"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật can thiệp ngoại khoa vùng chân",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Vùng Chân"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật hỗ trợ giảm cân",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Giảm Cân"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật tạo hình cơ thể",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Tạo Hình Cơ Thể"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật tạo hình bộ phận sinh dục",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Tạo Hình Bộ Phận Sinh Dục"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật tạo hình da",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Tạo Hình Da"
                        },
                        new
                        {
                            Id = new Guid("10101010-1010-1010-1010-101010101010"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dịch vụ phẫu thuật tạo hình tai",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Phẫu Thuật Tạo Hình Tai"
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-1212-1212-121212121212"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Điều chỉnh hình dáng mũi để cân đối với khuôn mặt",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Nâng Mũi (Rhinoplasty)",
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("13131313-1313-1313-1313-131313131313"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Loại bỏ da thừa, mỡ thừa ở mí mắt, giúp mắt to và trẻ trung hơn",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Cắt Mí Mắt (Blepharoplasty)",
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("14141414-1414-1414-1414-141414141414"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Cải thiện vùng trán và cung mày, giảm nếp nhăn",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Nâng Cung Mày (Brow Lift)",
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("15151515-1515-1515-1515-151515151515"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Tạo hình cằm cân đối với khuôn mặt",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Độn Cằm (Chin Augmentation)",
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("16161616-1616-1616-1616-161616161616"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Loại bỏ mỡ thừa ở vùng mặt như má, cằm",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Hút Mỡ Mặt",
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("17171717-1717-1717-1717-171717171717"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Sử dụng túi độn hoặc mỡ tự thân để tăng kích thước ngực",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Nâng Ngực (Breast Augmentation)",
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("18181818-1818-1818-1818-181818181818"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Giảm kích thước ngực quá lớn",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Thu Nhỏ Ngực (Breast Reduction)",
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("19191919-1919-1919-1919-191919191919"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Loại bỏ mỡ thừa ở vùng bụng",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Hút Mỡ Bụng",
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("20202020-2020-2020-2020-202020202020"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Loại bỏ da thừa và mỡ, làm săn chắc vùng bụng",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Căng Da Bụng",
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClassificationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassificationLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OptionValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("ClassificationRules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-1111-1111-1111-111111111111"),
                            ClassificationLabel = "Da khô",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 247, DateTimeKind.Unspecified).AddTicks(8014), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            OptionValue = "A",
                            Points = 2,
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        },
                        new
                        {
                            Id = new Guid("33333333-2222-1111-1111-111111111111"),
                            ClassificationLabel = "Da thường",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 247, DateTimeKind.Unspecified).AddTicks(8020), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            OptionValue = "B",
                            Points = 2,
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-1111-1111-111111111111"),
                            ClassificationLabel = "Da hỗn hợp",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 247, DateTimeKind.Unspecified).AddTicks(8022), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            OptionValue = "C",
                            Points = 2,
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        },
                        new
                        {
                            Id = new Guid("33333333-4444-1111-1111-111111111111"),
                            ClassificationLabel = "Da dầu",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 247, DateTimeKind.Unspecified).AddTicks(8026), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            OptionValue = "D",
                            Points = 2,
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        },
                        new
                        {
                            Id = new Guid("33333333-5555-1111-1111-111111111111"),
                            ClassificationLabel = "Da nhạy cảm",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 247, DateTimeKind.Unspecified).AddTicks(8028), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            OptionValue = "E",
                            Points = 2,
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessLicenseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("OperatingLicenseExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperatingLicenseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalApply")
                        .HasColumnType("int");

                    b.Property<int?>("TotalBranches")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Clinic");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78705cfa-7097-408f-93e2-70950fc886a3"),
                            BankAccountNumber = "1234567890123",
                            BankName = "Vietcombank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-1.pdf",
                            City = "Hồ Chí Minh",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "beautycenter.saigon@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Beauty Center Sài Gòn",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-1.pdf",
                            PhoneNumber = "0283456789",
                            ProfilePictureUrl = "https://res.cloudinary.com/dmiueqpah/image/upload/v1744138052/1-1711946463238508154235_eakppa.jpg",
                            Status = 1,
                            TaxCode = "12345678901",
                            TotalApply = 0,
                            TotalBranches = 2
                        },
                        new
                        {
                            Id = new Guid("a96d68d9-3f28-48f3-add5-a74a6b882e93"),
                            BankAccountNumber = "2345678901234",
                            BankName = "BIDV",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-2.pdf",
                            City = "Hà Nội",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hanoi.beautyspa@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Hanoi Beauty Spa",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-2.pdf",
                            PhoneNumber = "0243812345",
                            Status = 1,
                            TaxCode = "23456789012",
                            TotalApply = 0,
                            TotalBranches = 2
                        },
                        new
                        {
                            Id = new Guid("e5a759cd-af8d-4a1c-8c05-43cc2c95e067"),
                            BankAccountNumber = "3456789012345",
                            BankName = "Agribank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-3.pdf",
                            City = "Đà Nẵng",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "skincare.danang@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Skin Care Đà Nẵng",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-3.pdf",
                            PhoneNumber = "0236789123",
                            Status = 1,
                            TaxCode = "34567890123",
                            TotalApply = 0,
                            TotalBranches = 2
                        },
                        new
                        {
                            Id = new Guid("c0b7058f-8e72-4dee-8742-0df6206d1843"),
                            BankAccountNumber = "1234567890124",
                            BankName = "Vietcombank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-1-1.pdf",
                            City = "Hồ Chí Minh",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "beautycenter.q1@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Beauty Center Sài Gòn - Chi nhánh Quận 1",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-1-1.pdf",
                            ParentId = new Guid("78705cfa-7097-408f-93e2-70950fc886a3"),
                            PhoneNumber = "0283456111",
                            Status = 1,
                            TaxCode = "12345678902",
                            TotalApply = 0,
                            TotalBranches = 0
                        },
                        new
                        {
                            Id = new Guid("6e7e4870-d28d-4a2d-9d0f-9e29f2930fc5"),
                            BankAccountNumber = "1234567890125",
                            BankName = "Vietcombank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-1-2.pdf",
                            City = "Hồ Chí Minh",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "beautycenter.q3@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Beauty Center Sài Gòn - Chi nhánh Quận 3",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-1-2.pdf",
                            ParentId = new Guid("78705cfa-7097-408f-93e2-70950fc886a3"),
                            PhoneNumber = "0283456222",
                            Status = 1,
                            TaxCode = "12345678903",
                            TotalApply = 0,
                            TotalBranches = 0
                        },
                        new
                        {
                            Id = new Guid("f3e6a7ca-28f9-4c7b-a190-c065cecf7be3"),
                            BankAccountNumber = "2345678901235",
                            BankName = "BIDV",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-2-1.pdf",
                            City = "Hà Nội",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hanoi.dongda@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Hanoi Beauty Spa - Chi nhánh Đống Đa",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-2-1.pdf",
                            ParentId = new Guid("a96d68d9-3f28-48f3-add5-a74a6b882e93"),
                            PhoneNumber = "0243812111",
                            ProfilePictureUrl = "https://res.cloudinary.com/dvadlh7ah/image/upload/v1744178257/ty7jok5ooenrha5aydid.jpg",
                            Status = 1,
                            TaxCode = "23456789013",
                            TotalApply = 0,
                            TotalBranches = 0
                        },
                        new
                        {
                            Id = new Guid("c96de07e-32d7-41d5-b417-060cd95ee7ff"),
                            BankAccountNumber = "2345678901236",
                            BankName = "BIDV",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-2-2.pdf",
                            City = "Hà Nội",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hanoi.caugiay@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Hanoi Beauty Spa - Chi nhánh Cầu Giấy",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-2-2.pdf",
                            ParentId = new Guid("a96d68d9-3f28-48f3-add5-a74a6b882e93"),
                            PhoneNumber = "0243812222",
                            ProfilePictureUrl = "https://res.cloudinary.com/dmiueqpah/image/upload/v1744138051/hinh-AA-Clinic-lgo-moi-1-1_smg56o.jpg",
                            Status = 1,
                            TaxCode = "23456789014",
                            TotalApply = 0,
                            TotalBranches = 0
                        },
                        new
                        {
                            Id = new Guid("3c8b8f3d-2f3f-4b17-9b46-0517c0183a50"),
                            BankAccountNumber = "3456789012346",
                            BankName = "Agribank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-3-1.pdf",
                            City = "Đà Nẵng",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "skincare.haichau@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Skin Care Đà Nẵng - Chi nhánh Hải Châu",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-3-1.pdf",
                            ParentId = new Guid("e5a759cd-af8d-4a1c-8c05-43cc2c95e067"),
                            PhoneNumber = "0236789111",
                            Status = 1,
                            TaxCode = "34567890124",
                            TotalApply = 0,
                            TotalBranches = 0
                        },
                        new
                        {
                            Id = new Guid("6ed1aefc-863e-4f2e-9c24-83eec7c0181c"),
                            BankAccountNumber = "3456789012347",
                            BankName = "Agribank",
                            BusinessLicenseUrl = "https://storage.googleapis.com/licenses/business-license-3-2.pdf",
                            City = "Đà Nẵng",
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "skincare.sontra@gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Skin Care Đà Nẵng - Chi nhánh Sơn Trà",
                            OperatingLicenseUrl = "https://storage.googleapis.com/licenses/operating-license-3-2.pdf",
                            ParentId = new Guid("e5a759cd-af8d-4a1c-8c05-43cc2c95e067"),
                            PhoneNumber = "0236789222",
                            Status = 1,
                            TaxCode = "34567890125",
                            TotalApply = 0,
                            TotalBranches = 0
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicOnBoardingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("SendMailDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicOnBoardingRequest");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClinicService");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("MaximumDiscountPercent")
                        .HasColumnType("float");

                    b.Property<int>("MaximumUsage")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalUsage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClinicVoucher");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorNote")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcedurePriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ProcedurePriceTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerScheduleReminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("SentOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerScheduleId");

                    b.ToTable("CustomerScheduleReminders");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorCertificate");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorService");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId")
                        .IsUnique();

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JoinCount")
                        .HasColumnType("int");

                    b.Property<Guid>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MessageCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalActivities")
                        .HasColumnType("int");

                    b.Property<int>("TotalBooking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivestreamRoomId")
                        .IsUnique();

                    b.ToTable("LiveStreamDetail");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("EndDate")
                        .HasColumnType("time");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly?>("StartDate")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalViewers")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("LivestreamRoom");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsClinic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("LivestreamRoomId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProcedurePriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcedurePriceTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Procedure");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedureMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProcedureMedia");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProcedurePriceType");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LivestreamRoomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b7171f4-3219-4688-9f7c-625687a95867"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "System Admin"
                        },
                        new
                        {
                            Id = new Guid("248bf96b-9782-4011-8bb0-b26e66658090"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "System Staff"
                        },
                        new
                        {
                            Id = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("b5db3ea1-f81c-465e-a23b-da7d6d361930"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = new Guid("c6d93b8c-f509-4498-abbb-fe63edc66f2b"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Clinic Admin"
                        },
                        new
                        {
                            Id = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Clinic Staff"
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfCustomersUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ServiceMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceMediaType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceMedia");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("660071ba-8f74-43b8-b332-3bd138a110ae"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FirstName = "System",
                            IsDeleted = false,
                            LastName = "Admin",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("4b7171f4-3219-4688-9f7c-625687a95867"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("51965a2d-93b9-4dc2-b513-325578842216"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "staff@gmail.com",
                            FirstName = "System",
                            IsDeleted = false,
                            LastName = "Staff",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("248bf96b-9782-4011-8bb0-b26e66658090"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c5514d77-31b0-4c07-b1fe-bf3219e249db"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "beautycenter.saigon@gmail.com",
                            FirstName = "Beauty Center Sài Gòn",
                            IsDeleted = false,
                            LastName = "Beauty Center Sài Gòn",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("c6d93b8c-f509-4498-abbb-fe63edc66f2b"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f3850b25-56de-4e0d-8e66-d46617cc6f92"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hanoi.beautyspa@gmail.com",
                            FirstName = "Hanoi Beauty Spa",
                            IsDeleted = false,
                            LastName = "Hanoi Beauty Spa",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("c6d93b8c-f509-4498-abbb-fe63edc66f2b"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a283eb13-8d68-46c9-8a1d-450e0cc7ad13"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "skincare.danang@gmail.com",
                            FirstName = "Skin Care Đà Nẵng",
                            IsDeleted = false,
                            LastName = "Skin Care Đà Nẵng",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("c6d93b8c-f509-4498-abbb-fe63edc66f2b"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d2b2d4b8-c22c-4fcb-96c4-85ccfa378b32"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dothanhsonquan1@gmail.com",
                            FirstName = "Đỗ Thanh",
                            IsDeleted = false,
                            LastName = "Sơn Quận 1",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d2b2d4b8-c22c-4fcb-96c4-85ccfa378b33"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dothanhsonquan3@gmail.com",
                            FirstName = "Đỗ Thanh",
                            IsDeleted = false,
                            LastName = "Sơn Quận 3",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b02a28f3-f1a7-4fd7-bcb1-53be587be9f9"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "caoanhdung@gmail.com",
                            FirstName = "Cao Anh",
                            IsDeleted = false,
                            LastName = "Dũng",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b9ab6eb6-5953-455e-8d53-5ec345f8649e"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "vuthithu@gmail.com",
                            FirstName = "Vũ Thị",
                            IsDeleted = false,
                            LastName = "Thu",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9dde4ec6-b02f-419a-900b-5c42f1a6c863"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "lethihuong@gmail.com",
                            FirstName = "Lê Thị",
                            IsDeleted = false,
                            LastName = "Hương",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6f8bb800-0594-4389-9749-f214ef855bdc"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "nguyenvananh@gmail.com",
                            FirstName = "Nguyễn Văn",
                            IsDeleted = false,
                            LastName = "Anh",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a73d00ac-00c4-456e-ab2e-dd184f8681dd"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phamthiha@gmail.com",
                            FirstName = "Phạm Thị",
                            IsDeleted = false,
                            LastName = "Hà",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ab23d158-44e2-44d4-b679-d7c568993702"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phamphucnghi@gmail.com",
                            FirstName = "Phạm Phúc",
                            IsDeleted = false,
                            LastName = "Nghị",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a2b21279-5bbd-40c3-8981-6821c7f6b2ea"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "trandinhthientan@gmail.com",
                            FirstName = "Trần Đình Thiên",
                            IsDeleted = false,
                            LastName = "Tân",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("da2d6a80-75cc-4757-8ed3-e0b508ffb080"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "trinhthuonglam@gmail.com",
                            FirstName = "Trịnh Thượng",
                            IsDeleted = false,
                            LastName = "Lâm",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8b0f0b23-f07f-453d-b8bc-1acb26d03d87"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "doanthanhtien@gmail.com",
                            FirstName = "Đoàn Thanh",
                            IsDeleted = false,
                            LastName = "Tiến",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("79f207d4-dbbf-488d-848d-fc74a7fdbb29"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phanvankhoa@gmail.com",
                            FirstName = "Phan Văn",
                            IsDeleted = false,
                            LastName = "Khoa",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("32e8cfbb-d8b4-4768-8695-81b6b7e63c63"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "hoangminhtrang@gmail.com",
                            FirstName = "Hoàng Minh",
                            IsDeleted = false,
                            LastName = "Trang",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c21fa13a-b2f6-4eba-8b77-d2c57854bc5f"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "tranthanhlong@gmail.com",
                            FirstName = "Trần Thanh",
                            IsDeleted = false,
                            LastName = "Long",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bd3c9480-7bca-43d7-94ed-58cea8b32733"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "nguyenngocmaihuong@gmail.com",
                            FirstName = "Nguyễn Ngọc Mai",
                            IsDeleted = false,
                            LastName = "Hương",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5e9bd8dd-fb53-4f74-bf59-b3aedb96aa7c"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "voanhquan@gmail.com",
                            FirstName = "Võ Anh",
                            IsDeleted = false,
                            LastName = "Quân",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("71ddc3c7-a3a0-4e6b-bd1d-f03d5deedbfa"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "lethikimhoa@gmail.com",
                            FirstName = "Lê Thị Kim",
                            IsDeleted = false,
                            LastName = "Hoa",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e8e3f18b-9179-48a6-94bb-1e5320fb8f30"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "phamtuanminh@gmail.com",
                            FirstName = "Phạm Tuấn",
                            IsDeleted = false,
                            LastName = "Minh",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f76d8ab1-c9eb-4e29-a9f1-5302b543c283"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "nguyenminhhieu@gmail.com",
                            FirstName = "Nguyễn Minh",
                            IsDeleted = false,
                            LastName = "Hiếu",
                            Password = "QFUsZBROui+rvdxQ0JkaJg==:6z/WlleDL/PeFU/GLZ3ZHy50E8GTUNzv0mRqB77oE8w=",
                            RoleId = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("EnhancedViewer")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LimitBranch")
                        .HasColumnType("int");

                    b.Property<int>("LimitLiveStream")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPackage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b7171f4-3219-4688-9f7c-625687a95867"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dùng Thử",
                            Duration = 30,
                            EnhancedViewer = 0,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 0,
                            LimitLiveStream = 1,
                            Name = "Dùng Thử",
                            Price = 0m
                        },
                        new
                        {
                            Id = new Guid("248bf96b-9782-4011-8bb0-b26e66658090"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Đồng",
                            Duration = 30,
                            EnhancedViewer = 0,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 1,
                            LimitLiveStream = 5,
                            Name = "Đồng",
                            Price = 3000m
                        },
                        new
                        {
                            Id = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bạc",
                            Duration = 30,
                            EnhancedViewer = 100,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 5,
                            LimitLiveStream = 10,
                            Name = "Bạc",
                            Price = 5200m
                        },
                        new
                        {
                            Id = new Guid("b5db3ea1-f81c-465e-a23b-da7d6d361930"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Vàng",
                            Duration = 30,
                            EnhancedViewer = 200,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 10,
                            LimitLiveStream = 20,
                            Name = "Vàng",
                            Price = 9000000m
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345"),
                            CategoryId = new Guid("20202020-2020-2020-2020-202020202020"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(5638), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nhận biết loại da",
                            IsDeleted = false,
                            Name = "Khảo sát da"
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6496), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Sau khi rửa mặt (không bôi kem) da bạn thường cảm thấy thế nào?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-222222222222"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6498), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Vào giữa ngày da bạn trông thế nào (nếu không thấm dầu)?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-333333333333"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6500), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Tần suất bong tróc hoặc khô mảng?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-444444444444"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6501), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Mức độ nhìn thấy lỗ chân lông?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-555555555555"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6503), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Bạn có thường bị mụn hoặc tắc nghẽn lỗ chân lông?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-666666666666"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6504), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Da bạn có khi nào vừa khô ở vài chỗ vừa dầu ở chỗ khác?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-777777777777"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6506), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Phản ứng da khi dùng sản phẩm mới hoặc thời tiết thay đổi?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-888888888888"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6507), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Nếu bỏ qua kem dưỡng một ngày da bạn thế nào?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-999999999999"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6509), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Khi trang điểm lớp nền giữ trên da ra sao?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        },
                        new
                        {
                            Id = new Guid("d1a2c3b4-e5f6-4789-abcd-aaaaaaaaaaaa"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(6510), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Question = "Tổng quát, câu mô tả nào hợp nhất với da bạn?",
                            QuestionType = "Multiple Choice",
                            SurveyId = new Guid("f3e2c9f4-9d1b-4d3f-98a6-2a7fabc12345")
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Option")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyQuestionOption");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7284), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Rất căng khô hoặc bong tróc; B) Khá cân bằng không quá khô hay dầu; C) Hơi bóng ở vùng chữ T; D) Bóng dầu toàn mặt; E) Đỏ hoặc châm chích",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-111111111111")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7287), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Không hầu như chỉ khô; B) Không khá đồng đều; C) Thường khô ở má nhưng dầu vùng chữ T; D) Oily toàn mặt; E) Thay đổi theo độ nhạy cảm",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-222222222222")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7290), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Rất nhỏ hoặc gần như không thấy; B) Thấy ở mức vừa phải; C) Rõ hơn ở vùng chữ T; D) To và dễ thấy toàn mặt; E) Rõ hơn khi da ửng đỏ hoặc kích ứng",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-333333333333")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a14"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7291), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Rất căng và khó chịu; B) Khá bình thường; C) T-zone bóng má bình thường; D) Rất bóng hoặc nhờn; E) Đỏ hoặc ngứa",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-444444444444")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a15"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7295), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Khô hơn hoặc bong tróc; B) Thích nghi khá ổn; C) Có vùng dầu vùng không; D) Tăng tiết dầu nổi mụn; E) Kích ứng ửng đỏ",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-555555555555")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a16"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7296), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Thường xuyên; B) Hầu như không bao giờ; C) Thỉnh thoảng ở một số vùng; D) Rất hiếm; E) Do nhạy cảm với sản phẩm hoặc thời tiết",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-666666666666")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a17"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7299), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Dễ bám vào vùng khô; B) Khá đều cần ít dặm lại; C) Xuống tông hoặc bóng ở chữ T; D) Trôi hoặc bóng dầu gần như toàn mặt; E) Kích ứng hoặc ửng đỏ",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-777777777777")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a18"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7301), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Rất hiếm; B) Đôi khi; C) Chủ yếu ở vùng chữ T; D) Thường xuyên hoặc toàn mặt; E) Phụ thuộc độ nhạy cảm với sản phẩm",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-888888888888")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a19"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7303), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Rất khô và hay căng; B) Cân bằng không quá khô dầu; C) Vừa dầu vừa khô da hỗn hợp; D) Dầu toàn mặt; E) Rất nhạy cảm hoặc dễ kích ứng",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-999999999999")
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a1a"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(2025, 4, 11, 2, 45, 32, 254, DateTimeKind.Unspecified).AddTicks(7305), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Option = "A) Vẫn khô hoặc căng; B) Khá cân bằng ít bóng; C) Có chút bóng ở vùng chữ T; D) Bóng dầu toàn khuôn mặt; E) Dễ kích ứng hoặc ửng đỏ",
                            SurveyQuestionId = new Guid("d1a2c3b4-e5f6-4789-abcd-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SystemTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubscriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubscriptionPackageId");

                    b.ToTable("SystemTransaction");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.TriggerOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TriggerOutboxs");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClinic");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c330a77-5168-49f3-98ad-b06a25a9c814"),
                            ClinicId = new Guid("78705cfa-7097-408f-93e2-70950fc886a3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("c5514d77-31b0-4c07-b1fe-bf3219e249db")
                        },
                        new
                        {
                            Id = new Guid("f3f9e5a7-d0b1-4f8a-8a45-b37a07178e4b"),
                            ClinicId = new Guid("a96d68d9-3f28-48f3-add5-a74a6b882e93"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("f3850b25-56de-4e0d-8e66-d46617cc6f92")
                        },
                        new
                        {
                            Id = new Guid("d58a7c2d-a9f2-4c9b-bd3e-32126a76f2a5"),
                            ClinicId = new Guid("e5a759cd-af8d-4a1c-8c05-43cc2c95e067"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("a283eb13-8d68-46c9-8a1d-450e0cc7ad13")
                        },
                        new
                        {
                            Id = new Guid("b2e0cbc8-1f29-45a1-b0d6-1f67d83c0a7d"),
                            ClinicId = new Guid("c0b7058f-8e72-4dee-8742-0df6206d1843"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("d2b2d4b8-c22c-4fcb-96c4-85ccfa378b32")
                        },
                        new
                        {
                            Id = new Guid("7f0c57c5-632a-4241-8425-95e8d1c5bd5a"),
                            ClinicId = new Guid("6e7e4870-d28d-4a2d-9d0f-9e29f2930fc5"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("d2b2d4b8-c22c-4fcb-96c4-85ccfa378b33")
                        },
                        new
                        {
                            Id = new Guid("c7b4a5e6-d879-4b5a-9f3e-95e8d1c5bd5b"),
                            ClinicId = new Guid("f3e6a7ca-28f9-4c7b-a190-c065cecf7be3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("b9ab6eb6-5953-455e-8d53-5ec345f8649e")
                        },
                        new
                        {
                            Id = new Guid("e8d9c5a3-b4d7-4f5a-9e3c-1a2b3c4d5e6f"),
                            ClinicId = new Guid("c96de07e-32d7-41d5-b417-060cd95ee7ff"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("9dde4ec6-b02f-419a-900b-5c42f1a6c863")
                        },
                        new
                        {
                            Id = new Guid("f9e8d7c6-b5a4-4c3b-9d2e-1a2b3c4d5e6f"),
                            ClinicId = new Guid("3c8b8f3d-2f3f-4b17-9b46-0517c0183a50"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("6f8bb800-0594-4389-9749-f214ef855bdc")
                        },
                        new
                        {
                            Id = new Guid("01b2c3d4-e5f6-4a5b-8c7d-9e8f7a6b5c4d"),
                            ClinicId = new Guid("6ed1aefc-863e-4f2e-9c24-83eec7c0181c"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("a73d00ac-00c4-456e-ab2e-dd184f8681dd")
                        },
                        new
                        {
                            Id = new Guid("06a7b8c9-d0e1-4f2a-3b4c-5d6e7f8a9b0c"),
                            ClinicId = new Guid("c0b7058f-8e72-4dee-8742-0df6206d1843"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("ab23d158-44e2-44d4-b679-d7c568993702")
                        },
                        new
                        {
                            Id = new Guid("07b8c9d0-e1f2-4a3b-4c5d-6e7f8a9b0c1d"),
                            ClinicId = new Guid("c0b7058f-8e72-4dee-8742-0df6206d1843"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("a2b21279-5bbd-40c3-8981-6821c7f6b2ea")
                        },
                        new
                        {
                            Id = new Guid("08c9d0e1-f2a3-4b4c-5d6e-7f8a9b0c1d2e"),
                            ClinicId = new Guid("6e7e4870-d28d-4a2d-9d0f-9e29f2930fc5"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("a2b21279-5bbd-40c3-8981-6821c7f6b2ea")
                        },
                        new
                        {
                            Id = new Guid("09d0e1f2-a3b4-4c5d-6e7f-8a9b0c1d2e3f"),
                            ClinicId = new Guid("6e7e4870-d28d-4a2d-9d0f-9e29f2930fc5"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("8b0f0b23-f07f-453d-b8bc-1acb26d03d87")
                        },
                        new
                        {
                            Id = new Guid("16e7f8a9-b0c1-4d2e-3f4a-5b6c7d8e9f0a"),
                            ClinicId = new Guid("f3e6a7ca-28f9-4c7b-a190-c065cecf7be3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("79f207d4-dbbf-488d-848d-fc74a7fdbb29")
                        },
                        new
                        {
                            Id = new Guid("17f8a9b0-c1d2-4e3f-4a5b-6c7d8e9f0a1b"),
                            ClinicId = new Guid("f3e6a7ca-28f9-4c7b-a190-c065cecf7be3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("32e8cfbb-d8b4-4768-8695-81b6b7e63c63")
                        },
                        new
                        {
                            Id = new Guid("18a9b0c1-d2e3-4f4a-5b6c-7d8e9f0a1b2c"),
                            ClinicId = new Guid("c96de07e-32d7-41d5-b417-060cd95ee7ff"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("c21fa13a-b2f6-4eba-8b77-d2c57854bc5f")
                        },
                        new
                        {
                            Id = new Guid("19b0c1d2-e3f4-4a5b-6c7d-8e9f0a1b2c3d"),
                            ClinicId = new Guid("c96de07e-32d7-41d5-b417-060cd95ee7ff"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("bd3c9480-7bca-43d7-94ed-58cea8b32733")
                        },
                        new
                        {
                            Id = new Guid("26c7d8e9-f0a1-4b2c-3d4e-5f6a7b8c9d0e"),
                            ClinicId = new Guid("3c8b8f3d-2f3f-4b17-9b46-0517c0183a50"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("5e9bd8dd-fb53-4f74-bf59-b3aedb96aa7c")
                        },
                        new
                        {
                            Id = new Guid("27d8e9f0-a1b2-4c3d-4e5f-6a7b8c9d0e1f"),
                            ClinicId = new Guid("3c8b8f3d-2f3f-4b17-9b46-0517c0183a50"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("71ddc3c7-a3a0-4e6b-bd1d-f03d5deedbfa")
                        },
                        new
                        {
                            Id = new Guid("28e9f0a1-b2c3-4d4e-5f6a-7b8c9d0e1f2a"),
                            ClinicId = new Guid("6ed1aefc-863e-4f2e-9c24-83eec7c0181c"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("e8e3f18b-9179-48a6-94bb-1e5320fb8f30")
                        },
                        new
                        {
                            Id = new Guid("29f0a1b2-c3d4-4e5f-6a7b-8c9d0e1f2a3b"),
                            ClinicId = new Guid("6ed1aefc-863e-4f2e-9c24-83eec7c0181c"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("f76d8ab1-c9eb-4e29-a9f1-5302b543c283")
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversation");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVoucherId");

                    b.HasIndex("OrderId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CustomerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerScheduleId");

                    b.HasIndex("DoctorClinicId");

                    b.ToTable("WorkingSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.PERSISTENCE.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OccurredOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ProcessedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClassificationRule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicOnBoardingRequest", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("ClinicOnBoardingRequests")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicService", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinics")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Services")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinics");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("ClinicVouchers")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("ClinicVouchers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", "Doctor")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", null)
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("ProcedureId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", "ProcedurePriceType")
                        .WithMany()
                        .HasForeignKey("ProcedurePriceTypeId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Order");

                    b.Navigation("ProcedurePriceType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerScheduleReminder", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", "CustomerSchedule")
                        .WithMany()
                        .HasForeignKey("CustomerScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorCertificate", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "Doctor")
                        .WithMany("DoctorCertificates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorService", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Feedback", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", null)
                        .WithOne("Feedback")
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.Feedback", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamDetail", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", null)
                        .WithOne("LiveStreamDetail")
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamDetail", "LivestreamRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("LivestreamRooms")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Message", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany()
                        .HasForeignKey("LivestreamRoomId");

                    b.Navigation("Conversation");

                    b.Navigation("LivestreamRoom");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", "ProcedurePriceType")
                        .WithMany()
                        .HasForeignKey("ProcedurePriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Order");

                    b.Navigation("ProcedurePriceType");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("Procedures")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedureMedia", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", "Procedure")
                        .WithMany("ProcedureMedias")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", "Procedure")
                        .WithMany("ProcedurePriceTypes")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Promotion", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany("Promotions")
                        .HasForeignKey("LivestreamRoomId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("Promotions")
                        .HasForeignKey("ServiceId");

                    b.Navigation("LivestreamRoom");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ServiceMedia", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("ServiceMedias")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", "SurveyResponse")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyResponseId");

                    b.Navigation("SurveyQuestion");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestionOption", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithOne("SurveyResponse")
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SystemTransaction", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("SystemTransaction")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackageId");

                    b.Navigation("Clinic");

                    b.Navigation("Order");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("UserClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "User")
                        .WithMany("UserClinics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserConversation", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("UserConversations")
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", "Conversation")
                        .WithMany("UserConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId");

                    b.Navigation("Clinic");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Voucher", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", "ClinicVoucher")
                        .WithMany("Vouchers")
                        .HasForeignKey("ClinicVoucherId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("ClinicVoucher");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WorkingSchedule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", "CustomerSchedule")
                        .WithMany()
                        .HasForeignKey("CustomerScheduleId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", "DoctorClinic")
                        .WithMany("WorkingSchedules")
                        .HasForeignKey("DoctorClinicId");

                    b.Navigation("CustomerSchedule");

                    b.Navigation("DoctorClinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ClinicOnBoardingRequests");

                    b.Navigation("ClinicServices");

                    b.Navigation("ClinicVouchers");

                    b.Navigation("LivestreamRooms");

                    b.Navigation("SystemTransaction");

                    b.Navigation("UserClinics");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.Navigation("LiveStreamDetail");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.Navigation("CustomerSchedules");

                    b.Navigation("ProcedureMedias");

                    b.Navigation("ProcedurePriceTypes");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.Navigation("ClinicServices");

                    b.Navigation("ClinicVouchers");

                    b.Navigation("CustomerSchedules");

                    b.Navigation("OrderDetails");

                    b.Navigation("Procedures");

                    b.Navigation("Promotions");

                    b.Navigation("ServiceMedias");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.Navigation("DoctorCertificates");

                    b.Navigation("DoctorServices");

                    b.Navigation("UserClinics");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyQuestionOptions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.Navigation("CustomerSchedules");

                    b.Navigation("Orders");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.Navigation("CustomerSchedules");

                    b.Navigation("WorkingSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
