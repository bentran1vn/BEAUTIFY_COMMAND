// <auto-generated />
using System;
using BEAUTIFY_COMMAND.PERSISTENCE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BEAUTIFY_COMMAND.PERSISTENCE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507161623_FeedbackChangeMigration")]
    partial class FeedbackChangeMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClassificationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassificationLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OptionValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("ClassificationRules");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdditionBranches")
                        .HasColumnType("int");

                    b.Property<int>("AdditionLivestreams")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessLicenseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("OperatingLicenseExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperatingLicenseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalApply")
                        .HasColumnType("int");

                    b.Property<int?>("TotalBranches")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("WorkingTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkingTimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicOnBoardingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("SendMailDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicOnBoardingRequest");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClinicService");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OrderId");

                    b.ToTable("ClinicTransactions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("MaximumDiscountPercent")
                        .HasColumnType("float");

                    b.Property<int>("MaximumUsage")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalUsage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClinicVoucher");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorNote")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcedurePriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FeedbackId")
                        .IsUnique()
                        .HasFilter("[FeedbackId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ProcedurePriceTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerScheduleReminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("SentOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerScheduleId");

                    b.ToTable("CustomerScheduleReminders");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorCertificate");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorService");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Follower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("Follower");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JoinCount")
                        .HasColumnType("int");

                    b.Property<Guid>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MessageCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalActivities")
                        .HasColumnType("int");

                    b.Property<int>("TotalBooking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LiveStreamDetail");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LivestreamRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("LiveStreamLog");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("EndDate")
                        .HasColumnType("time");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LiveStreamDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly?>("StartDate")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalViewers")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("EventId");

                    b.HasIndex("LiveStreamDetailId")
                        .IsUnique()
                        .HasFilter("[LiveStreamDetailId] IS NOT NULL");

                    b.ToTable("LivestreamRoom");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsClinic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("LivestreamRoomId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("OrderFeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LivestreamRoomId");

                    b.HasIndex("OrderFeedbackId")
                        .IsUnique()
                        .HasFilter("[OrderFeedbackId] IS NOT NULL");

                    b.HasIndex("ServiceId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProcedurePriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcedurePriceTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderFeedback");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedbackMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderFeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderFeedbackId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFeedbackMedia");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedureMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProcedureMedia");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProcedurePriceTypes");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LivestreamRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LivestreamRoomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b7171f4-3219-4688-9f7c-625687a95867"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "System Admin"
                        },
                        new
                        {
                            Id = new Guid("248bf96b-9782-4011-8bb0-b26e66658090"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "System Staff"
                        },
                        new
                        {
                            Id = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("b5db3ea1-f81c-465e-a23b-da7d6d361930"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = new Guid("c6d93b8c-f509-4498-abbb-fe63edc66f2b"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Clinic Admin"
                        },
                        new
                        {
                            Id = new Guid("2e25e963-c03f-45e6-a29d-f22c08e117b3"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Clinic Staff"
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DepositPercent")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfCustomersUsed")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ServiceMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceMediaType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceMedia");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ShiftConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ShiftConfig");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("EnhancedViewer")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LimitBranch")
                        .HasColumnType("int");

                    b.Property<int>("LimitLiveStream")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceMoreBranch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceMoreLivestream")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPackage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b7171f4-3219-4688-9f7c-625687a95867"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dùng Thử",
                            Duration = 30,
                            EnhancedViewer = 0,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 0,
                            LimitLiveStream = 1,
                            Name = "Dùng Thử",
                            Price = 0m,
                            PriceMoreBranch = 0m,
                            PriceMoreLivestream = 0m
                        },
                        new
                        {
                            Id = new Guid("248bf96b-9782-4011-8bb0-b26e66658090"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Đồng",
                            Duration = 30,
                            EnhancedViewer = 0,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 1,
                            LimitLiveStream = 5,
                            Name = "Đồng",
                            Price = 3000m,
                            PriceMoreBranch = 0m,
                            PriceMoreLivestream = 0m
                        },
                        new
                        {
                            Id = new Guid("b549752a-f156-4894-90ad-ab3994fd071d"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bạc",
                            Duration = 30,
                            EnhancedViewer = 100,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 5,
                            LimitLiveStream = 10,
                            Name = "Bạc",
                            Price = 5200m,
                            PriceMoreBranch = 0m,
                            PriceMoreLivestream = 0m
                        },
                        new
                        {
                            Id = new Guid("b5db3ea1-f81c-465e-a23b-da7d6d361930"),
                            CreatedOnUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Vàng",
                            Duration = 30,
                            EnhancedViewer = 200,
                            IsActivated = true,
                            IsDeleted = false,
                            LimitBranch = 10,
                            LimitLiveStream = 20,
                            Name = "Vàng",
                            Price = 9000000m,
                            PriceMoreBranch = 0m,
                            PriceMoreLivestream = 0m
                        });
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Option")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyQuestionOption");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SystemTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AdditionBranches")
                        .HasColumnType("int");

                    b.Property<int?>("AdditionLivestreams")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubscriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubscriptionPackageId");

                    b.ToTable("SystemTransaction");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.TriggerOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TriggerOutboxs");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversation");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVoucherId");

                    b.HasIndex("OrderId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMakeBySystem")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewestQrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelatedTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CustomerScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ShiftCapacity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShiftGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ShiftGroupId");

                    b.ToTable("WorkingSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.PERSISTENCE.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OccurredOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ProcessedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClassificationRule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicOnBoardingRequest", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("ClinicOnBoardingRequests")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicService", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinics")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Services")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinics");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicTransaction", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Clinic");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("ClinicVouchers")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("ClinicVouchers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", "Doctor")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Feedback", "Feedback")
                        .WithOne()
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", "FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", "ProcedurePriceType")
                        .WithMany()
                        .HasForeignKey("ProcedurePriceTypeId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("CustomerSchedules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Feedback");

                    b.Navigation("Order");

                    b.Navigation("Procedure");

                    b.Navigation("ProcedurePriceType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerScheduleReminder", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", "CustomerSchedule")
                        .WithMany()
                        .HasForeignKey("CustomerScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerSchedule");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorCertificate", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "Doctor")
                        .WithMany("DoctorCertificates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.DoctorService", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Event", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("Events")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Follower", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("Followers")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserId");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamLog", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany("LiveStreamLogs")
                        .HasForeignKey("LivestreamRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("LivestreamRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("LivestreamRooms")
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Event", "Event")
                        .WithMany("LivestreamRoom")
                        .HasForeignKey("EventId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LiveStreamDetail", "LiveStreamDetail")
                        .WithOne()
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LiveStreamDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Clinic");

                    b.Navigation("Event");

                    b.Navigation("LiveStreamDetail");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Message", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany()
                        .HasForeignKey("LivestreamRoomId");

                    b.Navigation("Conversation");

                    b.Navigation("LivestreamRoom");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany()
                        .HasForeignKey("LivestreamRoomId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedback", "OrderFeedback")
                        .WithOne()
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "OrderFeedbackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Customer");

                    b.Navigation("LivestreamRoom");

                    b.Navigation("OrderFeedback");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderDetail", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", "ProcedurePriceType")
                        .WithMany()
                        .HasForeignKey("ProcedurePriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Order");

                    b.Navigation("ProcedurePriceType");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedbackMedia", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedback", null)
                        .WithMany("OrderFeedbackMedias")
                        .HasForeignKey("OrderFeedbackId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("Procedures")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedureMedia", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", "Procedure")
                        .WithMany("ProcedureMedias")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ProcedurePriceType", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", "Procedure")
                        .WithMany("ProcedurePriceTypes")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Promotion", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", "LivestreamRoom")
                        .WithMany("Promotions")
                        .HasForeignKey("LivestreamRoomId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("Promotions")
                        .HasForeignKey("ServiceId");

                    b.Navigation("LivestreamRoom");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ServiceMedia", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", "Service")
                        .WithMany("ServiceMedias")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ShiftConfig", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("ShiftConfigs")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", "SurveyResponse")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyResponseId");

                    b.Navigation("SurveyQuestion");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestionOption", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", "Survey")
                        .WithOne("SurveyResponse")
                        .HasForeignKey("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SystemTransaction", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("SystemTransaction")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackageId");

                    b.Navigation("Clinic");

                    b.Navigation("Order");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("UserClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "User")
                        .WithMany("UserClinics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserConversation", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("UserConversations")
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", "Conversation")
                        .WithMany("UserConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId");

                    b.Navigation("Clinic");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Voucher", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", "ClinicVoucher")
                        .WithMany("Vouchers")
                        .HasForeignKey("ClinicVoucherId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("ClinicVoucher");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WalletTransaction", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany("Transactions")
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Clinic");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.WorkingSchedule", b =>
                {
                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.CustomerSchedule", "CustomerSchedule")
                        .WithMany()
                        .HasForeignKey("CustomerScheduleId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("BEAUTIFY_COMMAND.DOMAIN.Entities.ShiftConfig", "ShiftGroup")
                        .WithMany()
                        .HasForeignKey("ShiftGroupId");

                    b.Navigation("Clinic");

                    b.Navigation("CustomerSchedule");

                    b.Navigation("Doctor");

                    b.Navigation("ShiftGroup");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Clinic", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ClinicOnBoardingRequests");

                    b.Navigation("ClinicServices");

                    b.Navigation("ClinicVouchers");

                    b.Navigation("Events");

                    b.Navigation("Followers");

                    b.Navigation("LivestreamRooms");

                    b.Navigation("ShiftConfigs");

                    b.Navigation("SystemTransaction");

                    b.Navigation("Transactions");

                    b.Navigation("UserClinics");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.ClinicVoucher", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Event", b =>
                {
                    b.Navigation("LivestreamRoom");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.LivestreamRoom", b =>
                {
                    b.Navigation("LiveStreamLogs");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.OrderFeedback", b =>
                {
                    b.Navigation("OrderFeedbackMedias");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Procedure", b =>
                {
                    b.Navigation("ProcedureMedias");

                    b.Navigation("ProcedurePriceTypes");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Service", b =>
                {
                    b.Navigation("ClinicServices");

                    b.Navigation("ClinicVouchers");

                    b.Navigation("CustomerSchedules");

                    b.Navigation("OrderDetails");

                    b.Navigation("Procedures");

                    b.Navigation("Promotions");

                    b.Navigation("ServiceMedias");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Staff", b =>
                {
                    b.Navigation("DoctorCertificates");

                    b.Navigation("DoctorServices");

                    b.Navigation("UserClinics");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyQuestionOptions");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.SurveyResponse", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.User", b =>
                {
                    b.Navigation("CustomerSchedules");

                    b.Navigation("Followers");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BEAUTIFY_COMMAND.DOMAIN.Entities.UserClinic", b =>
                {
                    b.Navigation("CustomerSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
